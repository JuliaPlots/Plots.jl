name: ci

on:
  pull_request:
  push:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  ci:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      JULIA_CONDAPKG_BACKEND: "MicroMamba"
      MPLBACKEND: "agg"
      GKS_ENCODING: "utf8"
      GKSwstype: "nul"
    name: Julia ${{ matrix.version }} - ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.9' # minimal declared julia compat in `Project.toml`
          - '1' # latest stable
        experimental:
          - false
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            experimental: true
            version: '~1.11.0-0'  # upcoming julia version (`alpha`, `beta` or `rc`)
          - os: ubuntu-latest
            experimental: true
            version: 'nightly'

    steps:
      - uses: actions/checkout@v4

      - name: Ubuntu LaTeX dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get -y update
          sudo apt-get -y install gnuplot poppler-utils texlive-{latex-base,latex-extra,luatex} g++
          sudo fc-cache -vr

      - name: Set LD_PRELOAD
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "LD_PRELOAD=$(g++ --print-file-name=libstdc++.so)" >> $GITHUB_ENV

      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v1

      - name: Develop RecipesBase, RecipesPipeline, PlotsBase, Plots
        shell: julia --color=yes {0}
        run: |
          using Pkg
          foreach(path -> Pkg.develop(; path), ("./RecipesBase", "./RecipesPipeline", "./PlotsBase", "."))

      # - uses: julia-actions/julia-buildpkg@latest

      - name: Install conda based matplotlib
        shell: julia --color=yes {0}
        run: |
          using Pkg; Pkg.add("CondaPkg")
          using CondaPkg; CondaPkg.resolve()
          libgcc = if Sys.islinux()
            # see discourse.julialang.org/t/glibcxx-version-not-found/82209/8
            # julia 1.8.3 is built with libstdc++.so.6.0.29, so we must restrict to this version (gcc 11.3.0, not gcc 12.2.0)
            # see gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html
            specs = Dict(
              v"3.4.29" => ">=11.1,<12.1",
              v"3.4.30" => ">=12.1,<13.1",
              v"3.4.31" => ">=13.1,<14.1",
              v"3.4.32" => ">=14.1,<15.1",
              v"3.4.33" => ">=15.1,<16.1",
              # ... keep this up-to-date with gcc 16
            )[Base.BinaryPlatforms.detect_libstdcxx_version()]
            ("libgcc-ng$specs", "libstdcxx-ng$specs")
          else
            ()
          end
          CondaPkg.PkgREPL.add([libgcc..., "matplotlib"])
          CondaPkg.status()

      - name: Run RecipesBase, RecipesPipeline, PlotsBase, Plots tests
        timeout-minutes: 60
        run: |
          cmd=(julia --color=yes)
          if [ "$RUNNER_OS" == "Linux" ]; then
            cmd=(xvfb-run ${cmd[@]})
          fi
          echo ${cmd[@]}
          ${cmd[@]} -e '
            using Pkg
            foreach(name -> Pkg.test(name; coverage=true), ("RecipesBase", "RecipesPipeline", "PlotsBase", "Plots"))
          '

      - name: Run downstream tests
        if: startsWith(matrix.os, 'ubuntu')
        run: xvfb-run julia --color=yes ci/downstream.jl

      - uses: julia-actions/julia-processcoverage@latest
        if: startsWith(matrix.os, 'ubuntu')
        with:
          directories: RecipesBase/src,RecipesPipeline/src,src
      - uses: codecov/codecov-action@v4
        if: startsWith(matrix.os, 'ubuntu')
        with:
          file: lcov.info

  Skip:
    if: contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Skip CI ðŸš«
        run: echo skip ci
